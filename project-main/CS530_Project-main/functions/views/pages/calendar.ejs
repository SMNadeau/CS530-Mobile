<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Voluntary Spam | Calendar</title>

    <%- include('../partials/head') -%>

    <link href="/bower_components/tui-calendar/dist/tui-calendar.min.css" rel="stylesheet" />
    <link href="/bower_components/tui-date-picker/dist/tui-date-picker.css" rel="stylesheet" />
    <link href="/bower_components/tui-time-picker/dist/tui-time-picker.css" rel="stylesheet" />

    <script src="/bower_components/moment/min/moment.min.js"></script>
    <script src="/bower_components/moment-timezone/moment-timezone.js"></script>

    <script src="/bower_components/tui-code-snippet/dist/tui-code-snippet.js"></script>
    <script src="/bower_components/tui-time-picker/dist/tui-time-picker.js"></script>
    <script src="/bower_components/tui-date-picker/dist/tui-date-picker.js"></script>
    <script src="/bower_components/tui-calendar/dist/tui-calendar.min.js"></script>
  </head>

  <body id="page-top">

    <div id="loadingIndicator" class="justify-content-center">
      <div class="spinner-border" role="status">
        <span class="visually-hidden">Loading...</span>
      </div>
    </div>

    <!-- Navigation-->
    <%- include('../partials/nav') -%>

    <!-- Content-->
    <section class="content-section" id="content">
      <div class="container px-4 px-lg-5">
        <div class="row gx-4 gx-lg-5 justify-content-center">
          <div class="col-lg-8 text-center">
            <h2 class="text-white mb-4">Calendar</h2>
          </div>
        </div>

        <div class="btn-toolbar text-white mb-4 text-left">
          <div class="me-auto">
            <button id="prevBtn" class="btn btn-sm btn-outline-primary"><span class="d-none d-md-inline">Prev</span><span class="d-inline d-md-none"><</span></button>
            <button id="todayBtn" class="btn btn-sm btn-outline-primary mx-1">Today</button>
            <button id="nextBtn" class="btn btn-sm btn-outline-primary"><span class="d-none d-md-inline">Next</span><span class="d-inline d-md-none">></span></button>
          </div>

          <a class="btn btn-sm btn-primary mx-auto" data-bs-toggle="modal" href="#event_notification_modal" role="button" id="btn_notify_all">Notify...</a>
          <label class="mx-auto"><input type="checkbox" id="useWorkweek" autocomplete="off" /> Hide Weekends</label>

          <span id="current_date" class="current_date"></span>
        </div>

        <h4 class="text-warning mb-0" id="currentYearMonthLbl"></h4>

        <div id="calendar" style="height: 800px"></div>
      </div>
    </section>



    <div class="modal fade" id="event_modal" aria-hidden="true" aria-labelledby="eventModalLabel" tabindex="-1">
      <div class="modal-dialog modal-lg modal-fullscreen-md-down modal-dialog-centered-not modal-dialog-scrollable">
        <form name="event_form" id="event_form">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="eventModalLabel">Event</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <input type="hidden" name="eventId" id="event_id" value="" />
              <input type="hidden" name="tz" id="event_tz" value="" />

              <div class="form-check mb-3">
                <input type="checkbox" class="form-check-input event_is_allday" id="event_is_allday" name="is_allday" value="" placeholder="" autocomplete="off" />
                <label for="event_is_allday" class="form-check-label">All day</label>
              </div>

              <div class="form-floating mb-3">
                <input type="text" class="form-control event_summary" id="event_summary" name="summary" value="" placeholder="" required="required" />
                <label for="event_summary">Title</label>
              </div>

              <div class="form-floating mb-3">
                <textarea class="form-control event_description" id="event_description" name="description" placeholder=""></textarea>
                <label for="event_description">Description</label>
              </div>

              <div class="row">
                <div class="col">
                  <div class="form-floating mb-3">
                    <input type="date" class="form-control event_start_date" id="event_start_date" name="startDate" value="" placeholder="" required="required"/>
                    <label for="event_start_date">Event Start Date</label>
                  </div>

                </div>
                <div class="col">
                  <div class="form-floating mb-3">
                    <input type="time" class="form-control event_start_time" id="event_start_time" name="startTime" value="" placeholder=""/>
                    <label for="event_start_time">Event Start Time</label>
                  </div>
                </div>
              </div>

              
              <div class="row">
                <div class="col">
                  <div class="form-floating mb-3">
                    <input type="date" class="form-control event_end_date" id="event_end_date" name="endDate" value="" placeholder="" required="required" />
                    <label for="event_end_date">Event End Date</label>
                  </div>

                </div>
                <div class="col">
                  <div class="form-floating mb-3">
                    <input type="time" class="form-control event_end_time" id="event_end_time" name="endTime" value="" placeholder=""/>
                    <label for="event_end_time">Event End Time</label>
                  </div>
                </div>
              </div>

              <div class="card bg-dark bg-gradient bg-opacity-75 text-white">
                <div class="card-header py-1">
                  Categories
                </div>
                <div class="card-body py-1">

                  <%
                  let index = 0;
                  categories.forEach((el) => {
                  %>
                    <div class="form-check form-switch">
                      <input class="form-check-input event_category" name="categories" value="<%= el.name %>" type="checkbox" id="categorySwitch<%= index %>">
                      <label class="form-check-label" for="categorySwitch<%= index %>"><%= el.name %></label>
                    </div>
                  <%
                    index++;
                  } );
                  %>

                </div>
                <div class="card-footer py-1">
                  <small class="text-warning">no selection applies all categories</small>
                </div>
              </div>

            </div>
            <div class="modal-footer d-block">
              <div class="btn-toolbar" role="toolbar" aria-label="Event Actions">
                <button type="button" class="btn btn-outline-primary me-auto" data-bs-dismiss="modal">Cancel</button>

                <div class="btn-group mx-2" role="group">
                  <button id="btnDrop" type="button" title="More..." class="btn btn-outline-secondary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">&vellip;</button>
                  <ul class="dropdown-menu" aria-labelledby="btnDrop">
                    <li><button type="submit" class="dropdown-item text-danger" id="btn_event_delete" title="Delete">Delete</button></li>
                  </ul>
                </div>

                <div class="btn-group">
                  <button type="submit" class="btn btn-warning" id="btn_event_save">Save</button>
                  <button type="button" class="btn btn-primary" id="btn_event_notify_open">Notify...</button>
                </div>
              </div>
            </div>
          </div>
        </form>
      </div>
    </div>



    <div class="modal fade" id="event_notification_modal" aria-hidden="true" aria-labelledby="eventNotificationModalLabel" tabindex="-1">
      <div class="modal-dialog modal-md modal-dialog-centered-not modal-dialog-scrollable" >

        <div class="modal-body">
          <form name="event_form" id="notification_form">
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="modal-title" id="eventNotificationModalLabel">Notification</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
              </div>
              <div class="modal-body">
                <input type="hidden" name="eventid" id="notify_event_id" value="" />

                <div class="form-floating mb-3">
                  <input type="text" class="form-control event_notification_title" id="event_notification_title" name="title" placeholder="" required="required" />
                  <label for="event_notification_title">Title</label>
                </div>

                <div class="form-floating mb-3">
                  <textarea type="text" class="form-control event_notification_message" id="event_notification_message" name="message" placeholder="" required="required"></textarea>
                  <label for="event_notification_message">Message</label>
                </div>

                <div class="card bg-dark bg-gradient bg-opacity-75 text-white">
                  <div class="card-header py-1">
                    Categories
                  </div>
                  <div class="card-body py-1">

                    <%
                    let nIndex = 0;
                    categories.forEach((el) => {
                    %>
                      <div class="form-check form-switch">
                        <input class="form-check-input notification_category" name="categories" value="<%= el.name %>" type="checkbox" id="notificationCategorySwitch<%= nIndex %>">
                        <label class="form-check-label" for="notificationCategorySwitch<%= nIndex %>"><%= el.name %></label>
                      </div>
                    <%
                      nIndex++;
                    } );
                    %>

                  </div>
                  <div class="card-footer py-1">
                    <small class="text-warning">no selection applies all categories</small>
                  </div>
                </div>

              </div>
              <div class="modal-footer justify-content-between">
                <button class="btn btn-outline-primary" data-bs-dismiss="modal" type="button">Cancel</button>
                <button class="btn btn-primary" id="btn_notification_send" type="submit">Send</button>
              </div>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Footer-->
    <%- include('../partials/footer') -%>
  </body>

  <script>
    var vm = {};

    vm.broadcast = (eventName) => { dispatchEvent( new Event(eventName));}
    vm.listen = (eventName, func) => { addEventListener(eventName, () => func() ) };

    vm.loading = false;

    vm.prevBtn = document.getElementById("prevBtn");
    vm.todayBtn = document.getElementById("todayBtn");
    vm.nextBtn = document.getElementById("nextBtn");
    vm.useWorkweek = document.getElementById("useWorkweek");

    vm.modalOptions = {};
    vm.eventModal = new bootstrap.Modal(document.getElementById('event_modal'), vm.modalOptions);
    vm.eventModalEl = document.getElementById('event_modal');
    vm.eventIdEl = document.getElementById('event_id');
    vm.eventTimezoneEl = document.getElementById('event_tz');
    vm.btnSaveEl = document.getElementById('btn_event_save');
    vm.btnEventNotifyOpenEl = document.getElementById('btn_event_notify_open');
    vm.btnNotificationSendEl = document.getElementById('btn_notification_send');
    vm.btnDeleteEl = document.getElementById('btn_event_delete');
    vm.btnNotifyAllEl = document.getElementById('btn_notify_all');
    vm.currentYearMonthEl = document.getElementById('currentYearMonthLbl');
    vm.loadingIndicatorEl = document.getElementById('loadingIndicator');

    vm.eventFormEl = document.querySelector('#event_form');
    vm.notificationFormEl = document.querySelector('#notification_form');

    vm.eventSummaryEl = vm.eventModalEl.querySelector('.modal-body .event_summary');
    vm.eventDescriptionEl = vm.eventModalEl.querySelector('.modal-body .event_description');
    vm.eventStartDateEl = vm.eventModalEl.querySelector('.modal-body .event_start_date');
    vm.eventStartTimeEl = vm.eventModalEl.querySelector('.modal-body .event_start_time');
    vm.eventEndDateEl = vm.eventModalEl.querySelector('.modal-body .event_end_date');
    vm.eventEndTimeEl = vm.eventModalEl.querySelector('.modal-body .event_end_time');
    vm.eventIsAllDayEl = vm.eventModalEl.querySelector('.modal-body .event_is_allday');
    vm.eventCategoriesEls = vm.eventModalEl.querySelectorAll('.modal-body .event_category');

    vm.notifyModalEl = document.getElementById('event_notification_modal');
    vm.notifyModal = new bootstrap.Modal(vm.notifyModalEl, vm.modalOptions);
    vm.notifyEventIdEl = vm.notifyModalEl.querySelector('.modal-body #notify_event_id');
    vm.notifyTitleEl = vm.notifyModalEl.querySelector('.modal-body #event_notification_title');
    vm.notifyCategoriesEls = vm.notifyModalEl.querySelectorAll('.modal-body .notification_category');

    vm.eventModalEl.addEventListener('show.bs.modal', function (event) {
      console.log('show.bs.modal');

      vm.setTimezone();

      // ** get event
      if(vm.eventIdEl.value !== ''){
        vm.broadcast('dataLoading');
        fetch("/api/events/" + vm.eventIdEl.value , {
          headers: { "Content-Type": "application/json; charset=utf-8" },
        })
        .then((res) => {
          if(res.ok) {
            return res.json()
          }
          return res.text().then(text => {throw new Error(text)})
        })
        .then((response) => {
          console.log('event');
          console.dir(response);

          vm.isEventAllDay = !response.start.dateTime;

          vm.makeEventAllDay(vm.isEventAllDay);

          // ** update modal's contents
          vm.eventSummaryEl.value = response.summary;
          vm.eventDescriptionEl.value = response.description !== undefined ? response.description : '';

          vm.eventStartDateEl.value = moment(response.start.date || response.start.dateTime).local().format("YYYY-MM-DD");
          vm.eventStartTimeEl.value = !vm.isEventAllDay ? moment(response.start.date || response.start.dateTime).local().format("HH:mm:ss") : '';
          vm.eventEndDateEl.value = moment(response.end.date || response.end.dateTime).local().format("YYYY-MM-DD");
          vm.eventEndTimeEl.value = !vm.isEventAllDay ? moment(response.end.date || response.end.dateTime).local().format("HH:mm:ss") : '';

          vm.eventCategoriesEls.forEach( el => {
            el.checked = false;
          });

          vm.eventCategories = Array.isArray(response.eventCategories) ? response.eventCategories : JSON.parse(response.eventCategories);

          if(Array.isArray(vm.eventCategories)){
            vm.eventCategories.forEach( val => {
              console.log( 'select ' + val);
              if(val !== 'Uncat'){
                vm.eventModalEl.querySelector('.modal-body .event_category[value=' + val + ']').checked = true;
              }
            });
          }

        })
        .catch((err) => {
          console.dir(err);
          alert(err.message);
        })
        .finally( () => vm.broadcast('dataLoaded') );
      }
      else{
        // ** reset modal
        vm.resetModalValues();

        vm.makeEventAllDay(false);
      }
    });

    vm.notifyModalEl.addEventListener('show.bs.modal', function (event) {
      console.log('show.bs.modal notify');

      vm.notificationFormEl.reset();

      // ** get event
      if(vm.eventIdEl.value !== ''){
        // ** copy event id to notification modal
        vm.notifyEventIdEl.value = vm.eventIdEl.value;
        vm.notifyTitleEl.value = vm.eventSummaryEl.value;

        // ** copy event categories
        vm.notifyCategoriesEls.forEach( nEl => {
          vm.eventCategoriesEls.forEach( eEl => {
            if(eEl.value === nEl.value){
              nEl.checked = eEl.checked;
            }
          });
        });
      }
      else{
      }
    })

    vm.eventModalEl.addEventListener('hidden.bs.modal', function (event) {
      vm.resetModalValues();
    });

    vm.btnNotifyAllEl.addEventListener('click', function(e){

    });

    vm.eventIsAllDayEl.addEventListener('change', function(e){
      console.log('all-day changed');
      var checked = e.target.checked;
      console.log(checked);

      if(checked){
        vm.makeEventAllDay(true);
      }
      else{
        vm.makeEventAllDay(false);
      }
    });

    vm.eventFormEl.addEventListener('submit', function(event){
      console.log('submitting form, using ajax though');
      event.preventDefault();

      vm.updateEvent();

      vm.eventModal.hide();
    });

    vm.notificationFormEl.addEventListener('submit', function(event){
      console.log('sending push notification');
      event.preventDefault();
      vm.sendPushNotification();

      vm.notifyModal.hide();
    });

    vm.makeEventAllDay = function(isAllDay){
      if(isAllDay){
        vm.eventIsAllDayEl.checked = true;
        vm.eventStartTimeEl.removeAttribute('required');
        vm.eventStartTimeEl.setAttribute('disabled', 'disabled');
        vm.eventEndTimeEl.removeAttribute('required');
        vm.eventEndTimeEl.setAttribute('disabled', 'disabled');
      }
      else{
        vm.eventIsAllDayEl.checked = false;
        vm.eventStartTimeEl.setAttribute('required', 'required');
        vm.eventStartTimeEl.removeAttribute('disabled');
        vm.eventEndTimeEl.setAttribute('required', 'required');
        vm.eventEndTimeEl.removeAttribute('disabled');
      }
    }

    vm.resetModalValues = function(){
      vm.setTimezone();
      vm.eventIdEl.value = '';
      vm.eventSummaryEl.value = '';
      vm.eventDescriptionEl.value = '';
      vm.eventStartDateEl.value = '';
      vm.eventStartTimeEl.value = '';
      vm.eventEndDateEl.value = '';
      vm.eventEndTimeEl.value = '';

      vm.eventCategoriesEls.forEach( el => el.checked = false );
    }

    vm.setTimezone = function(){
      vm.eventTimezoneEl.value = Intl.DateTimeFormat().resolvedOptions().timeZone ?? null;
    }

    vm.updateEvent = function(){
      let data = new FormData(vm.eventFormEl);
      let req = new XMLHttpRequest();
      req.open(data.get('eventId') ? "PUT" : "POST", "/api/events/" + data.get('eventId'), false );
      req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

      /** a hack to get checkboxes to send an array of values
       * does not seem right, but that is what works */
      data.set('categories', JSON.stringify(data.getAll('categories')));

      req.send( JSON.stringify( Object.fromEntries(data)) );

      vm.reloadEvents();
    }

    vm.deleteEvent = function(){
      let data = new FormData(vm.eventFormEl);
      let del = false;
      if(data.get('eventId')){
        if(del = confirm('are you sure you want to delete this event?')){
          let req = new XMLHttpRequest();
          req.open("DELETE", "/api/events/" + data.get('eventId'), false );
          req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
          req.send( JSON.stringify( Object.fromEntries(data)) );

          vm.reloadEvents();
        }
      }
      else{
        alert('no event, cannot delete');
      }

      return del;
    }

    vm.sendPushNotification = function(){
      let data = new FormData(vm.notificationFormEl);
      let req = new XMLHttpRequest();
      req.open("POST", "/notify/send", false );
      req.setRequestHeader("Content-Type", "application/json;charset=UTF-8");

      /** a hack to get checkboxes to send an array of values
       * does not seem right, but that is what works */
      data.set('categories', JSON.stringify(data.getAll('categories')));

      req.send( JSON.stringify( Object.fromEntries(data)) );
    }

    vm.btnEventNotifyOpenEl.addEventListener('click', function(e){
      console.log('opening event notification modal');

      vm.notifyModal.show();
    });

    vm.btnDeleteEl.addEventListener('click', function(e){
      console.log('deleting event');
      e.preventDefault();
      if(vm.deleteEvent()){
        vm.eventModal.hide();
      }
    });

    vm.calendar = new tui.Calendar("#calendar", {
      defaultView: "month",
      month: {
        workweek: false,
      },
      useCreationPopup: false, // ** using our own modal popup
      useDetailPopup: false, // ** using our own modal popup
      usageStatistics: true,
      template: {
        monthDayname: function (dayname) {
          return (
            '<span class="calendar-week-dayname-name">' +
            dayname.label +
            "</span>"
          );
        },

        milestone: function (model) {
          return (
            '<span class="calendar-font-icon ic-milestone-b"></span> <span style="background-color: ' +
            model.bgColor +
            '">' +
            model.title +
            "</span>"
          );
        },
      },
      allday: function (schedule) {
        return getTimeTemplate(schedule, true);
      },
      time: function (schedule) {
        return getTimeTemplate(schedule, false);
      },

      // Options for daily, weekly view
      week: {},

    });

    vm.turnLoadingIndicator = function (blnSwitch){
      if(blnSwitch){
        console.log('dataLoading');
        vm.loading = true
        vm.loadingIndicatorEl.classList.add('active');
      }
      else {
        console.log('dataLoaded');
        vm.loading = false;
        vm.loadingIndicatorEl.classList.remove('active');
      }
    }

    vm.listen('dataLoaded', function(){ vm.turnLoadingIndicator(false); });
    vm.listen('dataLoading', function(){ vm.turnLoadingIndicator(true); });

    vm.reloadEvents = function(){
      vm.broadcast('dataLoading');
      fetch("/api/events", {
        headers: { "Content-Type": "application/json; charset=utf-8", "Pragma": "no-cache", "Cache-Control": "no-cache" },
      })
      .then((res) => {
        if(res.ok) {
          return res.json()
        }
        return res.text().then(text => {throw new Error(text)})
      })
      .then((response) => {
        console.dir(response);
        console.log('clearing');
        vm.calendar.clear();

        // https://nhn.github.io/tui.calendar/latest/Schedule
        let schedule = response;

        vm.calendar.createSchedules(schedule, true);
        vm.calendar.render();
      })
      .catch((err) => {
        console.log(err);
        alert("Filed to retrieve calendar events");
      })
      .finally(() => {
        vm.broadcast('dataLoaded');
      });
    }

    vm.reloadEvents();

    vm.calendar.on({
      clickMore: function (e) {
        console.log("clickMore", e);
      },
      clickSchedule: function (e) {
        console.log("clickSchedule", e);

        vm.eventIdEl.value = e.schedule.id;

        vm.eventModal.show();
      },
      clickDayname: function (date) {
        console.log("clickDayname", date);
      },
      beforeCreateSchedule: function (e) {
        console.log("beforeCreateSchedule", e);
        vm.eventIdEl.value = '';

        vm.eventModal.show();

        vm.eventStartDateEl.value = moment( new Date(e.start) ).local().format("YYYY-MM-DD");
        vm.eventStartTimeEl.value = moment( new Date(e.start) ).local().format("HH:mm:ss");

        vm.eventEndDateEl.value = moment( new Date(e.end) ).local().format("YYYY-MM-DD");
        vm.eventEndTimeEl.value = moment( new Date(e.end) ).local().format("HH:mm:ss");

        e.guide.clearGuideElement();
      },
      beforeUpdateSchedule: function (e) {
        const { schedule, changes } = e;
        console.log("beforeUpdateSchedule", e);
        vm.calendar.updateSchedule(schedule.id, schedule.calendarId, changes);
      },
      beforeDeleteSchedule: function (e) {
        console.log("beforeDeleteSchedule", e);
        vm.calendar.deleteSchedule(e.schedule.id, e.schedule.calendarId);
      },
      afterRenderSchedule: function (e) {
        console.log('afterRenderSchedule');
        const schedule = e.schedule;
      },
      clickTimezonesCollapseBtn: function (timezonesCollapsed) {
        console.log("timezonesCollapsed", timezonesCollapsed);

        if (timezonesCollapsed) {
          vm.calendar.setTheme({
            "week.daygridLeft.width": "77px",
            "week.timegridLeft.width": "77px",
          });
        } else {
          vm.calendar.setTheme({
            "week.daygridLeft.width": "60px",
            "week.timegridLeft.width": "60px",
          });
        }

        return true;
      },
    });

    vm.prevBtn.addEventListener("click", (e) => {
      vm.calendar.prev();
      vm.updateCurrentDateLabel();
    });

    vm.todayBtn.addEventListener("click", (e) => {
      vm.calendar.today();
      vm.updateCurrentDateLabel();
    });

    vm.nextBtn.addEventListener("click", (e) => {
      vm.calendar.next();
      vm.updateCurrentDateLabel();
    });

    vm.useWorkweek.addEventListener("change", (e) => {
      vm.calendar.setOptions({
        month: {
          workweek: e.currentTarget.checked,
        },
      });
    });

    vm.updateCurrentDateLabel = function(){
      vm.currentYearMonthEl.innerText = moment(vm.calendar.getDate().toDate()).format("MMMM YYYY");
    }

    vm.updateCurrentDateLabel();

  </script>
</html>
